# Generated by Django 3.1 on 2021-09-01 13:39

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('movies', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION movie_modified_by_genre() RETURNS trigger AS
                    $$ BEGIN
                        UPDATE content.movies
                            SET modified=NOW()
                            WHERE
                                  id IN (
                                      SELECT movie_id
                                        FROM content.movie_genre
                                      WHERE genre_id IN (OLD.id, NEW.id)
                                  );
                        RETURN NULL;
                    END
                    $$
                    LANGUAGE plpgsql;
                    
                CREATE CONSTRAINT TRIGGER movie_modified_by_genre_trigger
                    AFTER INSERT OR UPDATE OR DELETE ON content.genres
                    FOR EACH ROW EXECUTE FUNCTION movie_modified_by_genre();
            """,
            reverse_sql="""
                DROP TRIGGER movie_modified_by_genre_trigger ON content.genres;
                DROP FUNCTION movie_modified_by_genre;
            """,
        ),
        migrations.RunSQL(
            sql="""
                    CREATE OR REPLACE FUNCTION movie_modified_by_movie_genre() RETURNS trigger AS
                        $$
                        BEGIN
                            UPDATE content.movies SET modified=NOW() WHERE id IN (OLD.movie_id, NEW.movie_id);
                            RETURN NULL;
                        END
                        $$
                        LANGUAGE plpgsql;
                        
                    CREATE CONSTRAINT TRIGGER movie_modified_by_movie_genre_trigger
                        AFTER INSERT OR UPDATE OR DELETE ON content.movie_genre
                        FOR EACH ROW EXECUTE FUNCTION movie_modified_by_movie_genre();
                """,
            reverse_sql="""
                DROP TRIGGER movie_modified_by_movie_genre_trigger ON content.movie_genre;
                DROP FUNCTION movie_modified_by_movie_genre;
            """,
        ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION movie_modified_by_person() RETURNS trigger AS
                    $$
                    BEGIN
                        UPDATE content.movies
                            SET modified=NOW()
                            WHERE
                                id IN (
                                    SELECT movie_id
                                        FROM content.movie_person_role
                                    WHERE person_id IN (OLD.id, NEW.id)
                                );
                        RETURN NULL;
                    END;
                    $$
                    LANGUAGE plpgsql;
                    
                CREATE CONSTRAINT TRIGGER movie_modified_by_person_trigger
                    AFTER INSERT OR UPDATE OR DELETE ON content.persons
                    FOR EACH ROW EXECUTE FUNCTION movie_modified_by_person();
            """,
            reverse_sql="""
                DROP TRIGGER movie_modified_by_person_trigger ON content.persons;
                DROP FUNCTION movie_modified_by_person;
            """,
        ),
        migrations.RunSQL(
            sql="""
                    CREATE OR REPLACE FUNCTION movie_modified_by_movie_person_role() RETURNS trigger AS
                        $$
                        BEGIN
                            UPDATE content.movies SET modified=NOW() WHERE id IN (OLD.movie_id, NEW.movie_id);
                            RETURN NULL;
                        END;
                        $$
                        LANGUAGE plpgsql;
                        
                    CREATE CONSTRAINT TRIGGER movie_modified_by_movie_person_role_trigger
                        AFTER INSERT OR UPDATE OR DELETE ON content.movie_person_role
                        FOR EACH ROW EXECUTE FUNCTION movie_modified_by_movie_person_role();
                """,
            reverse_sql="""
                    DROP TRIGGER movie_modified_by_movie_person_role_trigger ON content.movie_person_role;
                    DROP FUNCTION movie_modified_by_movie_person_role;
                """,
        ),
        migrations.RunSQL(
            sql="""
                    CREATE OR REPLACE FUNCTION movie_modified_by_person_role() RETURNS trigger AS
                        $$
                        BEGIN
                            UPDATE content.movies
                                SET modified=NOW()
                                WHERE
                                    id IN (
                                        SELECT movie_id
                                            FROM content.movie_person_role
                                        WHERE person_role_id IN (OLD.id, NEW.id)
                                    );
                            RETURN NULL;
                        END;
                        $$
                        LANGUAGE plpgsql;
                        
                    CREATE CONSTRAINT TRIGGER movie_modified_by_person_role_trigger
                        AFTER INSERT OR UPDATE OR DELETE ON content.person_roles
                        FOR EACH ROW EXECUTE FUNCTION movie_modified_by_person_role();
                    """,
            reverse_sql="""
                        DROP TRIGGER movie_modified_by_person_role_trigger ON content.person_roles;
                        DROP FUNCTION movie_modified_by_person_role;
                    """,
        ),
        migrations.RunSQL(
            sql="""
                    CREATE OR REPLACE FUNCTION movie_modified_by_movie_type() RETURNS trigger AS
                        $$
                        BEGIN
                            UPDATE content.movies SET modified=NOW() WHERE type_id IN (OLD.id, NEW.id);
                            RETURN NULL;
                        END;
                        $$
                        LANGUAGE plpgsql;
                        
                    CREATE CONSTRAINT TRIGGER movie_modified_by_movie_type_trigger
                        AFTER INSERT OR UPDATE OR DELETE ON content.movie_types
                        FOR EACH ROW EXECUTE FUNCTION movie_modified_by_movie_type();
                    """,
            reverse_sql="""
                            DROP TRIGGER movie_modified_by_movie_type_trigger ON content.movie_types;
                            DROP FUNCTION movie_modified_by_movie_type;
                        """,
        ),
        migrations.RunSQL(
            sql="""
                        CREATE OR REPLACE FUNCTION movie_modified_by_certificate() RETURNS trigger AS
                            $$
                            BEGIN
                                UPDATE content.movies SET modified=NOW() WHERE certificate_id IN (OLD.id, NEW.id);
                                RETURN NULL;
                            END;
                            $$
                            LANGUAGE plpgsql;
                            
                        CREATE CONSTRAINT TRIGGER movie_modified_by_certificate_trigger
                            AFTER INSERT OR UPDATE OR DELETE ON content.certificates
                            FOR EACH ROW EXECUTE FUNCTION movie_modified_by_certificate();
                        """,
            reverse_sql="""
                                DROP TRIGGER movie_modified_by_certificate_trigger ON content.certificates;
                                DROP FUNCTION movie_modified_by_certificate;
                            """,
        ),
    ]
